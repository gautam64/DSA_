/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* build(vector<int>& postorder,int poststart,int postend,vector<int>& inorder,int instart,int inend,
            map<int,int> &hmap)
    {
        if(poststart>postend || instart>inend) return NULL;

        int index=hmap[postorder[postend]];
        TreeNode* root=new TreeNode(postorder[postend]);

        int numsright=inend-index;

        root->left=build(postorder,poststart,postend-numsright-1,inorder,instart,index-1,hmap);
        root->right=build(postorder,postend-numsright,postend-1,inorder,index+1,inend,hmap);

        return root;

    }
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {

        map<int,int> hmap;

        for(int i=0;i<inorder.size();i++)
        {
            hmap[inorder[i]]=i;
        }

        return build(postorder,0,postorder.size()-1,inorder,0,inorder.size()-1,hmap);
        
    }
};
