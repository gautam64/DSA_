/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* parenttrack(TreeNode* root, int start,unordered_map<TreeNode*,TreeNode*> &parent)
    {
        queue<TreeNode*> q;
        q.push(root);

        TreeNode* target;

        while(!q.empty())
        {
            TreeNode* node=q.front();
            if(node->val==start) target=node;
            q.pop();
            if(node->left)
            {
                q.push(node->left);
                parent[node->left]=node;
            }
            if(node->right)
            {
                q.push(node->right);
                parent[node->right]=node;
            }
        }

        return target;
    }
    int amountOfTime(TreeNode* root, int start) {

        unordered_map<TreeNode*,TreeNode* > parent;
        map<TreeNode*,bool> visited;

        TreeNode* target=parenttrack(root,start,parent);

        queue<TreeNode*> q;
        q.push(target);
        visited[target]=true;
        int time=0;

        while(!q.empty())
        {
            int size=q.size();
            int flag=0;

            for(int i=0;i<size;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                if(node->left && !visited[node->left])
                {
                    q.push(node->left);
                    visited[node->left]=true;
                    flag=1;
                }
                if(node->right && !visited[node->right])
                {
                    q.push(node->right);
                    visited[node->right]=true;
                    flag=1;
                }

                if(parent[node] && !visited[parent[node]])
                {
                    q.push(parent[node]);
                    visited[parent[node]]=true; 
                    flag=1;  
                }


            }

            if(flag) time++;

            
        }

        return time;


        
    }
};
