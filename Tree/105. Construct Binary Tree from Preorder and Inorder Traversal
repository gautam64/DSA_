/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* build(vector<int>& preorder,int prestart,int preend,
                         vector<int>& inorder,int instart,int inend,map<int,int> &hmap) 
    {
        if(prestart>preend || instart>inend) return NULL;

        TreeNode* root=new TreeNode(preorder[prestart]);
        int index=hmap[preorder[prestart]];

        int numsleft=index-instart;

        root->left=build(preorder,prestart+1,prestart+numsleft,inorder,instart,index-1,hmap);
        root->right=build(preorder,prestart+numsleft+1,preend,inorder,index+1,inend,hmap);

        return root;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {

        map<int,int> hmap;

        for(int i=0;i<inorder.size();i++)
        {
            hmap[inorder[i]]=i;

            
        }
        TreeNode* ans= build(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,hmap);

            return ans;
        
    }
};
