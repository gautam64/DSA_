/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {

        if(!root) return 0;

        queue<pair<TreeNode* ,long long int>> q;

        q.push({root,0});
        long long int width=0;

        while(!q.empty())
        {
            long long int size=q.size();
            long long int min=q.front().second;
            long long int last,first;
            for(int i=0;i<size;i++)
            {

                TreeNode* node=q.front().first;
                long long int cur_id=q.front().second-min;
                q.pop();
                

                if(i==0) first=cur_id;
                if(i==size-1) last=cur_id;

                if(node->left!=NULL) q.push({node->left,cur_id*2+1});
                if(node->right!=NULL) q.push({node->right,cur_id*2+2});
            }

            width=max(width,last-first+1);
        }

        return width;
        
    }
};
