/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    void markparents(TreeNode* root,unordered_map <TreeNode*,TreeNode*> &parent_track, TreeNode* target)
    {
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();
            
            for(int i=0;i<size;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                if(node->left)
                {
                    q.push(node->left);
                    parent_track[node->left]=node;
                }
                if(node->right)
                {
                    q.push(node->right);
                    parent_track[node->right]=node;
                }
            }
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {

        vector<int> ans;

        unordered_map<TreeNode*,TreeNode*> parent_track;
        markparents(root,parent_track,target);

        unordered_map<TreeNode*,bool> visited;
        queue<TreeNode*> q;
        q.push(target);
        visited[target]=true;
        int distance=0;

        if(k==0)
        {
            ans.push_back(target->val);
            return ans;
        } 

        while(!q.empty())
        {
            int size=q.size();
            distance++;
            
            for(int i=0;i<size;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                if(node->left && !visited[node->left])
                {
                    q.push(node->left);
                    visited[node->left]=true;
                }
                if(node->right && !visited[node->right])
                {
                    q.push(node->right);
                     visited[node->right]=true;
                }

                if(parent_track[node] && !visited[parent_track[node]])
                {
                    q.push(parent_track[node]);
                     visited[parent_track[node]]=true;
                }
            }

            if(distance==k) break;
        }

        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();

            ans.push_back(node->val);
        }

        return ans;
        
    }
};
