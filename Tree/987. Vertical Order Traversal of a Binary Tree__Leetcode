/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {

        vector<vector<int>> ans;
        map<int,map<int,multiset<int>>> nodes;
        queue<pair<TreeNode* ,pair<int,int>>> q;
        q.push({root,{0,0}});

        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                auto element=q.front();
                q.pop();
                TreeNode* a=element.first;
                int x=element.second.first;  //column
                int y=element.second.second;

                nodes[x][y].insert(a->val);

                if(a->left!=NULL)  q.push({a->left,{x-1,y+1}});
                if(a->right!=NULL)  q.push({a->right,{x+1,y+1}});

            }
        }

        for(auto p:nodes)
        {
            vector<int> col;

            for(auto q:p.second)
            {
                col.insert(col.end(),q.second.begin(),q.second.end());
            }

            ans.push_back(col);
        }

        return ans;
        
    }
};
