class Solution {
private:
    bool solve(vector<vector<char>>& board)
    {
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j]=='.')
                {
                    for(char c='1';c<='9';c++)
                    {
                        if(possible(board,i,j,c))
                        {
                            board[i][j]=c;

                            if(solve(board)==true)
                            {
                                return true;
                            }
                            else board[i][j]='.';
                        }
                    }

                    return false;
                }
                
            }
        }

        return true;
    }

bool possible(vector<vector<char>>& board,int row,int col,char c)
{
    for(int i=0;i<9;i++)
    {
        if(board[row][i]==c) return false;

        if(board[i][col]==c) return false;
    }

    int startcol=(col/3)*3;
    int startrow=(row/3)*3;

    for(int i=startrow;i<startrow+3;i++)
    {
        for(int j=startcol;j<startcol+3;j++)
        {
            if(board[i][j]==c) return false;
        }
    }

    return true;

}
public:
    void solveSudoku(vector<vector<char>>& board) {

        solve(board);
        
    }
};
