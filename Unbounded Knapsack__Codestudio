#include<bits/stdc++.h>
int solve(int ind,int w,vector<int> &profit, vector<int> &weight,vector<vector<int>> &dp)
{

    if(ind==0)
    {
        if(weight[0]<=w)
        {
            return profit[0]*(w/weight[0]);
        } 
        else return 0;
    }

    if(dp[ind][w]!=-1) return dp[ind][w];

    int nottake=solve(ind-1,w,profit,weight,dp);
    int take=INT_MIN;
    if(weight[ind]<=w) take=profit[ind]+solve(ind,w-weight[ind],profit,weight,dp);

    return dp[ind][w]=max(take,nottake);
}

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight){
    // Write Your Code Here.

    vector<vector<int>> dp(n,vector<int>(w+1,-1));

    return solve(n-1,w,profit,weight,dp);
}
