#include <bits/stdc++.h> 
int f(int index,int prev,int *arr, int n,vector<vector<int>> &dp){

    if(index==n) return 0;

    if(dp[index][prev+1]!=0) return dp[index][prev+1];

    int len=0+f(index+1,prev,arr,n,dp);
    if(prev==-1|| arr[index]>arr[prev])
    {
        len=max(len,1+f(index+1,index,arr,n,dp));
    }

    return dp[index][prev+1]=len;
}

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<vector<int>> dp(n+1,vector<int>(n+1,0));
    
    for(int index=n-1;index>=0;index--)
    {
        for(int prev=index-1;prev>=-1;prev--)
        {
            int len=0+dp[index+1][prev+1];
            if(prev==-1|| arr[index]>arr[prev])
              {
                    len=max(len,1+dp[index+1][index+1]);
                 }

           dp[index][prev+1]=len;
        }
    }

    return dp[0][0];
}
