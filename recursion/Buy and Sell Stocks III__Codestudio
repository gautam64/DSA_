
int solve(int i,int buy,int trans,vector<int>& prices,vector<vector<vector<int>>> &dp)
{
    if(i==prices.size() || trans==0) return 0;

    if(dp[i][buy][trans]!=-1) return dp[i][buy][trans];

    int profit=0;

    if(buy==1 && trans>0)
    {
        return profit=max(-prices[i]+solve(i+1,0,trans,prices,dp),solve(i+1,1,trans,prices,dp));
    }
    else
    {
        return profit=max(prices[i]+solve(i+1,1,trans-1,prices,dp),solve(i+1,0,trans,prices,dp));
    
    }

    return dp[i][buy][trans]=profit;
}
int maxProfit(vector<int>& prices)
{
    // Write your code here.

    vector<vector<vector<int>>> dp(prices.size()+1,vector<vector<int>>(2,vector<int>(3,0)));
    // for(int i=0;i<=prices.size();i++)
    // {
    //     for(int j=0;j<2;j++)
    //     {
    //         dp[i][j][0]=0;
    //     }
    // }

    // for(int i=0;i<2;i++)
    // {
    //     for(int j=1;j<=2;j++)
    //     {
    //         dp[prices.size()][i][j]=0;
    //     }
    // }
    

    for(int i=prices.size()-1;i>=0;i--)
    {
        for(int j=0;j<=1;j++)
        {
            for(int k=2;k>=1;k--)
            {

                int profit=0;

                if(j==1 )
                {
                    dp[i][j][k]=max(-prices[i]+dp[i+1][0][k],dp[i+1][1][k]);
                }
                else
                {
                    dp[i][j][k]=max(prices[i]+dp[i+1][1][k-1],dp[i+1][0][k]);
                
                }


            }
        }
    }

    return dp[0][1][2];


    //return solve(0,1,2,prices,dp);
}
