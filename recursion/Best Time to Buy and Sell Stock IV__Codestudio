#include <bits/stdc++.h> 

int solve(int i,int buy,int k,vector<int> &prices,vector<vector<vector<int>>> &dp)
{

    if(k==0) return 0;
    if(i==prices.size()) return 0;

    if(dp[i][buy][k]!=-1) return dp[i][buy][k];


    if(buy==1)
    {
        return dp[i][buy][k]=max(-prices[i]+solve(i+1,0,k,prices,dp),solve(i+1,1,k,prices,dp));
    }
    else
    {
        return dp[i][buy][k]=max(+prices[i]+solve(i+1,1,k-1,prices,dp),solve(i+1,0,k,prices,dp));
    }
}

int maximumProfit(vector<int> &prices, int n, int k)
{
    // Write your code here.

    vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(k+1,-1)));

    return solve(0,1,k,prices,dp);
    
}
