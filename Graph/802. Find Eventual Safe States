class Solution {
public:
    bool dfs(int node,vector<int> &vis,vector<int> &pathvis,vector<vector<int>> &graph,vector<int> &check)
    {
        vis[node]=1;
        pathvis[node]=1;
        check[node]=0;

        for(auto it:graph[node])
        {
            if(!vis[it])
            {
                if(dfs(it,vis,pathvis,graph,check)==true)
                {
                    check[node]=0;
                    return true;
                } 
                
            }
            else if(pathvis[it])
            {
                    check[node]=0;
                    return true;
            } 
        }

        pathvis[node]=0;
        check[node]=1;
        return false;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {

        vector<int> ans;
        vector<int> vis(graph.size(),0);
        vector<int> check(graph.size(),0);
        vector<int> pathvis(graph.size(),0);


        for(int i=0;i<graph.size();i++)
        {
            if(vis[i]==0)
            {
                dfs(i,vis,pathvis,graph,check);
            }
            
        }

        for(int i=0;i<graph.size();i++)
        {
            if(check[i]==1) ans.push_back(i);
        }

        return ans;
        
    }
};
