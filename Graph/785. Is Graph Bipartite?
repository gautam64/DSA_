class Solution {
public:
    bool check(int node,vector<int> &color,vector<vector<int>>& graph)
    {        

        queue<int> q;
        q.push(node);
        color[node]=0;

        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            for(auto it:graph[node])
            {
                if(color[it]==-1)
                {
                    color[it]=!color[node];
                    q.push(it);
                }
                else if(color[it]==color[node])
                {
                    return false;
                }

            }
        }

        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {


        int m=graph.size();
        vector<int> color(m,-1);

        for(int i=0;i<graph.size();i++)
        {
            if(color[i]==-1 )
            {
                if(check(i,color,graph)==false) return false;
            } 
        }

        return true;

        
        
    }
};
