#include <bits/stdc++.h> 
int solution(int i,int j,int row,int col,vector<vector<int>> &matrix,vector<vector<int>> &dp)
{
    if(j<0 || j>col) return -1e9;
    if(i==row)   return matrix[i][j];

    

    if(dp[i][j]!=-1)  return dp[i][j];

    int down=matrix[i][j]+solution(i+1,j,row,col,matrix,dp);
    int diagonal_left=matrix[i][j]+solution(i+1,j-1,row,col,matrix,dp);
    int diagonal_right=matrix[i][j]+solution(i+1,j+1,row,col,matrix,dp);
    
   
    return dp[i][j]=max(max(diagonal_left,diagonal_right),down);
    
    
}
int getMaxPathSum(vector<vector<int>> &matrix)
{
    int row=matrix.size();
    int col=matrix[0].size();
    int ans=INT_MIN;
    vector<vector<int>> dp(row,vector<int>(col,-1));
    for(int i=0;i<col;i++)
    {
        
        int temp=solution(0,i,row-1,col-1,matrix,dp);
        ans=max(ans,temp);
    }

    return ans;
}
