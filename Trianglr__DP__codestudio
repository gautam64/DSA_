#include <bits/stdc++.h>

long int solve(int row,int col,int n,vector<vector<int>>& triangle,vector<vector<int>> &dp)
{
	if(row==n-1) return triangle[row][col];
	if(row>=n || col>row ) return INT_MAX;

	if(dp[row][col]!=-1) return dp[row][col];

	long int below=triangle[row][col]+solve(row+1,col,n,triangle,dp);
	long int diagonal=triangle[row][col]+solve(row+1,col+1,n,triangle,dp);

	return dp[row][col]=min(below,diagonal);
}
int minimumPathSum(vector<vector<int>>& triangle, int n){
	// Write your code here.

	vector<vector<int>> dp(n,vector<int>(n,-1));

	return solve(0,0,n,triangle,dp);
}
