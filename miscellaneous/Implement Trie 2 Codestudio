#include <bits/stdc++.h> 
class Trie{

    public:

    struct Node{
        int cntendwith=0;
        int cntprefix=0;
        Node* links[26];

        bool containskey(char ch){
            return (links[ch-'a']!=NULL);
        };

        void put(char ch,Node* node){
            links[ch-'a']=node;
        };

        void increaseend(){
            cntendwith++;
        };

        void increaseprefix(){
            cntprefix++;
        };

        void deleteend(){
            cntendwith--;
        };

        void reduceprefix(){
            cntprefix--;
        };

        Node* get(char ch){
            return links[ch-'a'];
        };
    };

    Node* root;
    Trie(){
        // Write your code here.
        root=new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node* node=root;

        for(int i=0;i<word.size();i++)
        {
            if(!node->containskey(word[i]))
            {
                node->put(word[i],new Node);
                
            }
            node=node->get(word[i]);
            node->increaseprefix();
        }

        node->increaseend();

    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        Node* node=root;

        for(int i=0;i<word.size();i++)
        {
            if(!node->containskey(word[i]))
            {
                return 0;
                
            }
            node=node->get(word[i]);
        }

        return node->cntendwith;
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node* node=root;

        for(int i=0;i<word.size();i++)
        {
            if(!node->containskey(word[i]))
            {
                return 0;
                
            }
            node=node->get(word[i]);
        }

        return node->cntprefix;
    }

    void erase(string &word){
        // Write your code here.
        if(countWordsEqualTo(word)==0) return;
        
        Node* node=root;

        for(int i=0;i<word.size();i++)
        {
            if(node->containskey(word[i]))
            {
                node=node->get(word[i]);
                node->reduceprefix();
                
            }
            
        }

        node->deleteend();
    }
};
