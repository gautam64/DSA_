class Trie {
public:

    struct trienode{
        bool isendofword;
        trienode *children[26];
    };

    trienode* getnode(){
        trienode* newnode= new trienode();
        newnode->isendofword=false;

        for(int i=0;i<26;i++)
        {
           newnode->children[i]=NULL; 
        }

        return newnode;
    }

    trienode* root;
    Trie() {
        root=getnode();        
    }
    
    void insert(string word) {

        trienode* crawl=root;
        for(auto ch:word)
        {
            int idx=ch-'a';
            if(crawl->children[idx]==NULL)
            {
                crawl->children[idx]=getnode();                
            }

            crawl=crawl->children[idx];
        }

        crawl->isendofword=true;
        
    }
    
    bool search(string word) {

        trienode* crawl=root;
        for(auto ch:word)
        {
            int idx=ch-'a';
            if(crawl->children[idx]==NULL)
            {
                return false;                
            }

            crawl=crawl->children[idx];
        }

        if(crawl->isendofword==true && crawl!=NULL) return true;

        return false;
        
    }
    
    bool startsWith(string word) {

        trienode* crawl=root;
        for(auto ch:word)
        {
            int idx=ch-'a';
            if(crawl->children[idx]==NULL)
            {
                return false;                
            }

            crawl=crawl->children[idx];
        }

        if(crawl!=NULL) return true;

        return false;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
