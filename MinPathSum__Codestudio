#include <bits/stdc++.h> 

long int solve(int row,int col,int m,int n,vector<vector<int>> &grid,vector<vector<int>> &dp)
{

    if(row>=m || col >=n) return INT_MAX;
    if(row==m-1 && col==n-1) return grid[row][col];

    if(dp[row][col]!=-1) return dp[row][col];


    long int  down=grid[row][col]+solve(row+1,col,m,n,grid,dp);
    long int right=grid[row][col]+solve(row,col+1,m,n,grid,dp);

    return dp[row][col]=min(down,right);
}


int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.

    int m=grid.size();
    int n=grid[0].size();
    vector<vector<int>> dp(m,vector<int>(n,-1));

    return solve(0,0,m,n,grid,dp);
}
